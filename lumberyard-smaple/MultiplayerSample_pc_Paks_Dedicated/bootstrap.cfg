-- any of the settings in this file can be prefixed with a platform name
-- android, ios, osx, linux, windows, xbone, ps4
-- or left unprefixed to set all. The rules apply in the order they're declared

sys_game_folder=MultiplayerSample

-- remote_filesystem - enable Virtual File System (VFS)
remote_filesystem=0

-- What type of assets are we going to load?
-- We need to know this before we establish VFS because different platform assets
-- are stored in different root folders in the cache.  These correspond to the names
-- In the asset processor config file.  This value also controls what config file is read
-- when you read system_xxxx_xxxx.cfg (for example, system_windows_pc.cfg or system_android_es3.cfg)

assets = pc
-- by default, pc assets (in the 'pc' folder) are used, with RC being fed 'pc' as the platform

android_assets = es3   
-- if you change the renderer on android to be OpenGL you may need to change this.

appletv_assets = ios
ios_assets = ios
osx_assets = osx_gl

-- Add ip address of the devices that will connect to the asset processor here
-- white_list=

-- ip and port of the asset processor.  Only if you need to change defaults
-- remote_ip=127.0.0.1
-- remote_port=45643

-- do we connect to the asset processor, or do we listen for its (reverse) connection?
connect_to_remote=0

-- do we pause startup of the game and wait for connection to be established
-- or do we allow it to continue in the background without waiting?
wait_for_connect=0
windows_wait_for_connect=1

-- android and IOS over USB port forwarding may need to listen instead of connect
android_connect_to_remote=0
appletv_connect_to_remote=0
ios_connect_to_remote=0
osx_connect_to_remote=0
assetProcessor_branch_token = 0xB49AD873




