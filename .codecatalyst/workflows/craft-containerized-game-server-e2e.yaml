Name: craft-containerized-gameserver-e2e
SchemaVersion: "1.0"

# Optional - Set automatic triggers.
Triggers:
  - Type: Push
    Branches:
      - main

# Required - Define action configurations.
Actions:
  Build_BaseImage:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: AWS_REGION
          Value: us-west-2
        - Name: BUILDX_VER
          Value: v0.10.3
        - Name: BASE_REPO
          Value: baseimage-ci
        - Name: BASE_IMAGE_TAG
          Value: multiarch-py3
        - Name: GAME_REPO
          Value: stk-ci
        - Name: GAME_ASSETS_TAG
          Value: stk-assets-multiarch
        - Name: GAME_ARM_CODE_TAG
          Value: stk-code-arm
        - Name: GAME_AMD_CODE_TAG
          Value: stk-code-amd
        - Name: GAME_CODE_TAG
          Value: stk-code-multiarch
        - Name: GAME_SERVER_TAG
          Value: stk-server-multiarch
        - Name: GITHUB_STK
          Value: https://github.com/yahavb/stk-code
        - Name: GITHUB_STK_BRANCH
          Value: master
        - Name: SVN_STK
          Value: https://svn.code.sf.net/p/supertuxkart/code/stk-assets
        - Name: INSTANCE_FAMILY
          Value: t4g
        - Name: CLUSTER_NAME
          Value: ddosudpsimu-us-west-2
    Outputs:
      AutoDiscoverReports:
        Enabled: false
    Configuration:
      Steps:
        - Run: BASE_IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$BASE_REPO:$BASE_IMAGE_TAG
        - Run: aws ecr get-login-password --region $AWS_REGION | docker login --username
            AWS --password-stdin $BASE_IMAGE
        - Run: docker buildx use craftbuilder
        - Run: docker buildx build --push --platform linux/arm64,linux/amd64 -t
            $BASE_IMAGE .
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
    Environment:
      Connections:
        - Role: CodeCatalystPreviewDevelopmentAdministrator-tyzxmm
          Name: "742301976366"
      Name: gameservers-us-east-1
