Name: craft-containerized-gameserver-e2e
SchemaVersion: "1.0"

# Optional - Set automatic triggers.
Triggers:
  - Type: PUSH
    Branches:
      - master

# Required - Define action configurations.
Actions:
  Build_BaseImage:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: AWS_REGION
          Value: us-west-2
        - Name: BUILDX_VER
          Value: v0.10.3
        - Name: BASE_REPO
          Value: baseimage-ci
        - Name: BASE_IMAGE_TAG
          Value: multiarch-py3
        - Name: GAME_REPO
          Value: stk-ci
        - Name: GAME_ASSETS_TAG
          Value: stk-assets-multiarch
        - Name: GAME_ARM_CODE_TAG
          Value: stk-code-arm
        - Name: GAME_AMD_CODE_TAG
          Value: stk-code-amd
        - Name: GAME_CODE_TAG
          Value: stk-code-multiarch
        - Name: GAME_SERVER_TAG
          Value: stk-server-multiarch
        - Name: GITHUB_STK
          Value: https://github.com/yahavb/stk-code
        - Name: GITHUB_STK_BRANCH
          Value: master
        - Name: SVN_STK
          Value: https://svn.code.sf.net/p/supertuxkart/code/stk-assets
        - Name: INSTANCE_FAMILY
          Value: t4g
        - Name: CLUSTER_NAME
          Value: ddosudpsimu-us-west-2
        - Name: AWS_ACCOUNT_ID
          Value: "742301976366"
    Outputs:
      AutoDiscoverReports:
        Enabled: false
    Configuration:
      Steps:
        - Run: export DOCKER_BUILDKIT=1
        - Run: docker build --platform=local -o . git://github.com/docker/buildx
        - Run: mkdir -p ~/.docker/cli-plugins
        - Run: mv buildx ~/.docker/cli-plugins/docker-buildx
        - Run: chmod a+x ~/.docker/cli-plugins/docker-buildx
        - Run: docker run --privileged --rm tonistiigi/binfmt --install all
        - Run: BASE_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${BASE_REPO}:${BASE_IMAGE_TAG}
        - Run: aws ecr get-login-password --region $AWS_REGION | docker login --username
            AWS --password-stdin ${BASE_IMAGE}
        - Run: docker buildx use craftbuilder
        - Run: docker buildx build --push --platform linux/arm64,linux/amd64 -t
            $BASE_IMAGE .
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
    Environment:
      Connections:
        - Role: CodeCatalystPreviewDevelopmentAdministrator-8147sr
          Name: "742301976366"
      Name: gameservers-us-east-1
  GameAssets_Linking:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource

    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rpt
    Configuration:
      Steps:
        - Run: GAME_ASSETS_IMAGE=${Build_BaseImage.AWS_ACCOUNT_ID}.dkr.ecr.${Build_BaseImage.AWS_REGION}.amazonaws.com/${Build_BaseImage.GAME_REPO}:${Build_BaseImage.GAME_ASSETS_TAG}
        - Run: export
            BASE_IMAGE="${Build_BaseImage.AWS_ACCOUNT_ID}.dkr.ecr.${Build_BaseImage.AWS_REGION}.amazonaws.com/${Build_BaseImage.BASE_REPO}:${Build_BaseImage.BASE_IMAGE_TAG}"
        - Run: cat Dockerfile.template | envsubst > Dockerfile
        - Run: aws ecr get-login-password --region ${{Build_BaseImage.AWS_REGION} | docker
            login --username AWS --password-stdin
            ${Build_BaseImage.GAME_ASSETS_IMAGE}
        - Run: docker buildx use craftbuilder
        - Run: docker buildx build --push --platform linux/arm64,linux/amd64 --build-arg
            SVN_STK=${{Build_BaseImage.SVN_STK} -t
            ${{Build_BaseImage.GAME_ASSETS_IMAGE} .
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
    DependsOn:
      - Build_BaseImage
    Environment:
      Connections:
        - Role: CodeCatalystPreviewDevelopmentAdministrator-8147sr
          Name: "742301976366"
      Name: gameservers-us-east-1
  Build_GameBinaries:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rpt
    Configuration:
      Steps:
        - Run: export DOCKER_BUILDKIT=1
        - Run: docker build --platform=local -o . git://github.com/docker/buildx
        - Run: mkdir -p ~/.docker/cli-plugins
        - Run: mv buildx ~/.docker/cli-plugins/docker-buildx
        - Run: chmod a+x ~/.docker/cli-plugins/docker-buildx
        - Run: docker run --privileged --rm tonistiigi/binfmt --install all
        - Run: GAME_ASSETS_IMAGE=${Build_BaseImage.AWS_ACCOUNT_ID}.dkr.ecr.${Build_BaseImage.AWS_REGION}.amazonaws.com/${Build_BaseImage.GAME_REPO}:${Build_BaseImage.GAME_ASSETS_TAG}
        - Run: export
            BASE_IMAGE="${Build_BaseImage.AWS_ACCOUNT_ID}.dkr.ecr.${Build_BaseImage.AWS_REGION}.amazonaws.com/${Build_BaseImage.BASE_REPO}:${Build_BaseImage.BASE_IMAGE_TAG}"
        - Run: cat Dockerfile.template | envsubst > Dockerfile
        - Run: aws ecr get-login-password --region ${Build_BaseImage.AWS_REGION} | docker
            login --username AWS --password-stdin
            ${Build_BaseImage.GAME_ASSETS_IMAGE}
        - Run: docker buildx use craftbuilder
        - Run: docker buildx build --push --platform linux/arm64,linux/amd64 --build-arg
            SVN_STK=${Build_BaseImage.SVN_STK} -t
            ${Build_BaseImage.GAME_ASSETS_IMAGE} .
    Compute:
      Type: EC2
    DependsOn:
      - GameAssets_Linking
    Environment:
      Connections:
        - Role: CodeCatalystPreviewDevelopmentAdministrator-8147sr
          Name: "742301976366"
      Name: gameservers-us-east-1
  Build_DeploymentGameImage:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rpt
    Configuration:
      Steps:
        - Run: export DOCKER_BUILDKIT=1
        - Run: docker build --platform=local -o . git://github.com/docker/buildx
        - Run: mkdir -p ~/.docker/cli-plugins
        - Run: mv buildx ~/.docker/cli-plugins/docker-buildx
        - Run: chmod a+x ~/.docker/cli-plugins/docker-buildx
        - Run: docker run --privileged --rm tonistiigi/binfmt --install all
        - Run: GAME_SERVER_IMAGE=${Build_BaseImage.AWS_ACCOUNT_ID}.dkr.ecr.${Build_BaseImage.AWS_REGION}.amazonaws.com/${Build_BaseImage.GAME_REPO}:${Build_BaseImage.GAME_SERVER_TAG}
        - Run: export
            GAME_CODE_IMAGE="${Build_BaseImage.AWS_ACCOUNT_ID}.dkr.ecr.${Build_BaseImage.AWS_REGION}.amazonaws.com/${Build_BaseImage.GAME_REPO}:${Build_BaseImage.GAME_CODE_TAG}"
        - Run: cat Dockerfile.template | envsubst > Dockerfile
        - Run: aws ecr get-login-password --region ${Build_BaseImage.AWS_REGION} | docker
            login --username AWS --password-stdin
            ${Build_BaseImage.GAME_SERVER_IMAGE}
        - Run: docker buildx use craftbuilder
        - Run: docker buildx build --push --platform linux/arm64  -t
            ${Build_BaseImage.GAME_SERVER_IMAGE} .
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
    DependsOn:
      - GameAssets_Linking
    Environment:
      Connections:
        - Role: CodeCatalystPreviewDevelopmentAdministrator-8147sr
          Name: "742301976366"
      Name: gameservers-us-east-1
